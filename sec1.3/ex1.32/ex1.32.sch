(define (accumulate-iterative combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
      result
      (iter (next a) (combiner result (term a)))
    )
  )
  (iter a null-value)
)

(define (accumulate-recursive combiner null-value term a next b)
  (if (> a b)
    null-value
    (combiner (term a) (accumulate-recursive combiner null-value term (next a) next b))
  )
)
(define (identity x) x)
(define (inc x) (+ x 1))
(define (test accumulate f)
  (define (sum term a next b) (accumulate + 0 term a next b))
  (define (mul term a next b) (accumulate * 1 term a next b))
  (display "\n\n")
  (display f)
  (display "\n  sum(x) for x in [1,4] = ")
  (display (sum identity 1 inc 4))
  (display "\n  4! = ")
  (display (mul identity 1 inc 4))
)

(test accumulate-iterative "accumulate-iterative")
(test accumulate-recursive "accumulate-recursive")
(exit)